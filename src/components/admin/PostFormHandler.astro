---
export interface Props {
  mode: 'create' | 'edit';
  postId?: number;
  redirectUrl?: string;
}

const {mode, postId, redirectUrl} = Astro.props;
---

<script is:inline define:vars={{mode, postId, redirectUrl}}>
  document.getElementById('post-form')?.addEventListener('submit', async (e) => {
    e.preventDefault();

    const form = e.target;
    const formData = new FormData(form);

    // Ensure content is up to date and validate it's non-empty
    const editor = window.editor;
    const contentTextarea = document.getElementById('post-content');
    if (contentTextarea) {
      const content = String(contentTextarea.value || '').trim();
      if (!content) {
        const statusEl = document.getElementById('status-message');
        statusEl.innerHTML = '<div class="text-destructive">Content is required.</div>';
        try {
          editor?.commands?.focus?.();
        } catch {}
        return; // Stop submission
      }
      formData.set('content', content);
    }

    // Convert form data to object
    const postData = {
      title: formData.get('title'),
      author: formData.get('author'),
      description: formData.get('description') || undefined,
      pub_date: formData.get('pub_date') || undefined,
      tags: (formData.get('tags') || '')
        .split(',')
        .map((tag) => tag.trim())
        .filter((tag) => tag.length > 0),
      content: formData.get('content'),
    };

    const statusEl = document.getElementById('status-message');

    try {
      statusEl.innerHTML = '<div class="text-muted-foreground">Saving post...</div>';

      const url = mode === 'create' ? '/api/posts' : `/api/posts/${postId}`;
      const method = mode === 'create' ? 'POST' : 'PUT';

      const response = await fetch(url, {
        method,
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(postData),
      });

      const result = await response.json();

      if (response.ok) {
        statusEl.innerHTML = `<div class="text-primary">Post ${mode === 'create' ? 'created' : 'updated'} successfully!</div>`;

        // Redirect to the post or specified URL
        const redirectTo = redirectUrl || `/posts/${result.slug}`;
        setTimeout(() => {
          window.location.href = redirectTo;
        }, 1500);
      } else {
        statusEl.innerHTML = `<div class="text-destructive">Error: ${result.error}</div>`;
      }
    } catch (error) {
      statusEl.innerHTML = `<div class="text-destructive">Failed to ${mode} post. Please try again.</div>`;
      console.error(`Error ${mode}ing post:`, error);
    }
  });
</script>
