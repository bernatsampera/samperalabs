---
export interface Props {
  content?: string;
  postId?: string;
}
const {content = '', postId} = Astro.props;
---

<div class="space-y-2">
  <label for="content" class="block text-sm font-medium text-primary">
    Content<span class="text-red-500">*</span>
  </label>
  <div id="editor-container" data-post-id={postId}>
    <div class="tiptap-editor-container border rounded-sm">
      <div id="tiptap-toolbar" class="tiptap-toolbar border rounded-t-sm p-2 flex flex-wrap gap-1">
        <!-- Text Formatting -->
        <div class="flex gap-1 border-r pr-2 mr-2">
          <button type="button" id="bold-btn" class="toolbar-btn" title="Bold (Ctrl+B)">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"></path>
              <path d="M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"></path>
            </svg>
          </button>
          <button type="button" id="italic-btn" class="toolbar-btn" title="Italic (Ctrl+I)">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <line x1="19" y1="4" x2="10" y2="4"></line>
              <line x1="14" y1="20" x2="5" y2="20"></line>
              <line x1="15" y1="4" x2="9" y2="20"></line>
            </svg>
          </button>
          <button type="button" id="underline-btn" class="toolbar-btn" title="Underline (Ctrl+U)">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M6 3v7a6 6 0 0 0 6 6 6 6 0 0 0 6-6V3"></path>
              <line x1="4" y1="21" x2="20" y2="21"></line>
            </svg>
          </button>
          <button type="button" id="strike-btn" class="toolbar-btn" title="Strikethrough">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M16 4H9a3 3 0 0 0-2.83 4"></path>
              <path d="M14 12c0 1-1 2-2 2s-2-1-2-2 1-2 2-2 2 1 2 2z"></path>
              <path d="M16 20H9a3 3 0 0 1-2.83-4"></path>
              <line x1="4" y1="12" x2="20" y2="12"></line>
            </svg>
          </button>
          <button type="button" id="code-btn" class="toolbar-btn" title="Inline Code">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="16 18 22 12 16 6"></polyline>
              <polyline points="8 6 2 12 8 18"></polyline>
            </svg>
          </button>
        </div>

        <!-- Headings -->
        <div class="flex gap-1 border-r pr-2 mr-2">
          <button type="button" id="h1-btn" class="toolbar-btn" title="Heading 1">H1</button>
          <button type="button" id="h2-btn" class="toolbar-btn" title="Heading 2">H2</button>
          <button type="button" id="h3-btn" class="toolbar-btn" title="Heading 3">H3</button>
          <button type="button" id="h4-btn" class="toolbar-btn" title="Heading 4">H4</button>
        </div>

        <!-- Lists -->
        <div class="flex gap-1 border-r pr-2 mr-2">
          <button type="button" id="bullet-list-btn" class="toolbar-btn" title="Bullet List">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <line x1="8" y1="6" x2="21" y2="6"></line>
              <line x1="8" y1="12" x2="21" y2="12"></line>
              <line x1="8" y1="18" x2="21" y2="18"></line>
              <line x1="3" y1="6" x2="3.01" y2="6"></line>
              <line x1="3" y1="12" x2="3.01" y2="12"></line>
              <line x1="3" y1="18" x2="3.01" y2="18"></line>
            </svg>
          </button>
          <button type="button" id="ordered-list-btn" class="toolbar-btn" title="Numbered List">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <line x1="10" y1="6" x2="21" y2="6"></line>
              <line x1="10" y1="12" x2="21" y2="12"></line>
              <line x1="10" y1="18" x2="21" y2="18"></line>
              <path d="M4 6h1v4"></path>
              <path d="M4 10h2"></path>
              <path d="M5 18H4c0-1 2-2 2-3s-1-1.5-2-1"></path>
            </svg>
          </button>
        </div>

        <!-- Block Elements -->
        <div class="flex gap-1 border-r pr-2 mr-2">
          <button type="button" id="blockquote-btn" class="toolbar-btn" title="Blockquote">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
            </svg>
          </button>
          <button type="button" id="code-block-btn" class="toolbar-btn" title="Code Block">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M16 18 22 12 16 6"></path>
              <path d="M8 6 2 12 8 18"></path>
            </svg>
          </button>
          <button type="button" id="horizontal-rule-btn" class="toolbar-btn" title="Horizontal Rule">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <line x1="5" y1="12" x2="19" y2="12"></line>
            </svg>
          </button>
        </div>

        <!-- Links and Media -->
        <div class="flex gap-1 border-r pr-2 mr-2">
          <button type="button" id="link-btn" class="toolbar-btn" title="Add Link">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path>
              <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path>
            </svg>
          </button>
          <button type="button" id="image-btn" class="toolbar-btn" title="Add Image">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
              <circle cx="8.5" cy="8.5" r="1.5"></circle>
              <polyline points="21,15 16,10 5,21"></polyline>
            </svg>
          </button>
        </div>

        <!-- History -->
        <div class="flex gap-1">
          <button type="button" id="undo-btn" class="toolbar-btn" title="Undo (Ctrl+Z)">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M3 7v6h6"></path>
              <path d="M21 17a9 9 0 0 0-9-9 9 9 0 0 0-6 2.3L3 13"></path>
            </svg>
          </button>
          <button type="button" id="redo-btn" class="toolbar-btn" title="Redo (Ctrl+Y)">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M21 7v6h-6"></path>
              <path d="M3 17a9 9 0 0 1 9-9 9 9 0 0 1 6 2.3l3-2.7"></path>
            </svg>
          </button>
        </div>
      </div>
      <div id="tiptap-editor" class="tiptap-editor border-t"></div>
    </div>
  </div>
  <!-- Hidden storage for markdown content (validated via JS) -->
  <textarea id="content" name="content" class="hidden" aria-hidden="true">{content}</textarea>
</div>

<style>
  .tiptap-editor-container {
    position: relative;
  }

  .tiptap-toolbar {
    position: sticky;
    top: 0;
    z-index: 1000;
    background-color: #f8f9fa;
    border-bottom: 1px solid #e9ecef;
    transition: box-shadow 0.2s ease;
    backdrop-filter: blur(8px);
  }

  .tiptap-toolbar.floating {
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
  }

  .tiptap-editor {
    font-family: 'Inter', sans-serif;
    min-height: 400px;
    padding: 1rem;
    background: var(--color-background);
    color: var(--color-text);
  }

  .tiptap-editor:focus {
    outline: none;
  }

  .toolbar-btn {
    padding: 0.5rem;
    border: 1px solid transparent;
    background: transparent;
    border-radius: 0.375rem;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--color-text);
  }

  .toolbar-btn:hover {
    background: var(--color-accent);
    border-color: var(--color-border);
  }

  .toolbar-btn.active {
    background: var(--color-primary);
    color: var(--color-primary-foreground);
    border-color: var(--color-primary);
  }

  .toolbar-btn svg {
    width: 16px;
    height: 16px;
  }

  /* Include basic editor styles inline for now */
  .tiptap-editor h1 {
    font-size: 2rem;
    font-weight: bold;
    margin: 1.5rem 0 1rem 0;
    line-height: 1.2;
  }
  .tiptap-editor h2 {
    font-size: 1.5rem;
    font-weight: bold;
    margin: 1.25rem 0 0.75rem 0;
    line-height: 1.3;
  }
  .tiptap-editor h3 {
    font-size: 1.25rem;
    font-weight: bold;
    margin: 1rem 0 0.5rem 0;
    line-height: 1.4;
  }
  .tiptap-editor h4 {
    font-size: 1.125rem;
    font-weight: bold;
    margin: 0.75rem 0 0.5rem 0;
    line-height: 1.4;
  }
  .tiptap-editor p {
    margin: 0.75em 0;
    line-height: 1.6;
  }
  .tiptap-editor ul {
    list-style: disc;
    padding-left: 1.5rem;
    margin: 0.75em 0;
  }
  .tiptap-editor ol {
    list-style: decimal;
    padding-left: 1.5rem;
    margin: 0.75em 0;
  }
  .tiptap-editor li {
    margin: 0.25em 0;
  }
  .tiptap-editor blockquote {
    border-left: 4px solid var(--color-primary);
    padding-left: 1rem;
    margin: 1rem 0;
    font-style: italic;
    color: var(--color-muted-foreground);
  }
  .tiptap-editor code {
    background: var(--color-muted);
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    font-size: 0.875em;
  }
  .tiptap-editor pre {
    background: var(--color-muted);
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin: 1rem 0;
  }
  .tiptap-editor pre code {
    background: none;
    padding: 0;
    border-radius: 0;
  }
  .tiptap-editor hr {
    border: none;
    border-top: 1px solid var(--color-border);
    margin: 2rem 0;
  }
  .tiptap-editor a {
    color: var(--color-primary);
    text-decoration: underline;
  }
  .tiptap-editor a:hover {
    text-decoration: none;
  }
  .tiptap-editor img {
    max-width: 100%;
    height: auto;
    border-radius: 0.5rem;
    margin: 1rem 0;
  }
  .tiptap-editor .is-editor-empty:first-child::before {
    content: attr(data-placeholder);
    float: left;
    color: var(--color-muted-foreground);
    pointer-events: none;
    height: 0;
  }
</style>

<script>
  import {createTipTapEditor, createEventHandlers, setupKeyboardShortcuts} from '../../../utils/editorUtils';

  let editor: any;
  let controller: any;

  document.addEventListener('DOMContentLoaded', async () => {
    const editorElement = document.getElementById('tiptap-editor');
    const contentTextarea = document.getElementById('content') as HTMLTextAreaElement;
    const toolbar = document.getElementById('tiptap-toolbar');

    if (editorElement && contentTextarea) {
      const postId = document.getElementById('editor-container')?.dataset.postId || undefined;
      const result = await createTipTapEditor(editorElement, contentTextarea, postId);
      editor = result.editor;
      controller = result.controller;

      // Set up event callbacks for editor updates
      editor.on('update', () => controller.updateToolbarState());
      editor.on('selectionUpdate', () => controller.updateToolbarState());

      // Initialize toolbar handlers and keyboard shortcuts
      createEventHandlers(controller);
      setupKeyboardShortcuts(controller);

      // Make editor globally available for form submission
      (window as any).editor = editor;
    }

    // Enhanced sticky toolbar behavior
    if (toolbar) {
      const editorContainer = toolbar.closest('.tiptap-editor-container');
      if (editorContainer) {
        const observer = new IntersectionObserver(
          (entries) => {
            entries.forEach((entry) => {
              if (entry.isIntersecting) {
                toolbar.classList.remove('floating');
              } else {
                toolbar.classList.add('floating');
              }
            });
          },
          {
            root: null,
            threshold: 0,
            rootMargin: '-1px 0px 0px 0px',
          }
        );

        // Create a sentinel element to track when toolbar should be sticky
        const sentinel = document.createElement('div');
        sentinel.style.height = '1px';
        editorContainer.insertBefore(sentinel, toolbar);
        observer.observe(sentinel);
      }
    }
  });
</script>
