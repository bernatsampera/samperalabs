---
import EditorToolbar from './EditorToolbar.astro';
---

<div class="tiptap-editor-container border rounded-sm">
  <EditorToolbar />
  <div id="tiptap-editor" class="tiptap-editor border-t"></div>
</div>

<style>
  .tiptap-editor {
    font-family: 'Inter', sans-serif;
    min-height: 400px;
    padding: 1rem;
    background: var(--color-background);
    color: var(--color-text);
  }

  .tiptap-editor:focus {
    outline: none;
  }

  .tiptap-editor h1 {
    font-size: 2rem;
    font-weight: bold;
    margin: 1.5rem 0 1rem 0;
    line-height: 1.2;
  }

  .tiptap-editor h2 {
    font-size: 1.5rem;
    font-weight: bold;
    margin: 1.25rem 0 0.75rem 0;
    line-height: 1.3;
  }

  .tiptap-editor h3 {
    font-size: 1.25rem;
    font-weight: bold;
    margin: 1rem 0 0.5rem 0;
    line-height: 1.4;
  }

  .tiptap-editor h4 {
    font-size: 1.125rem;
    font-weight: bold;
    margin: 0.75rem 0 0.5rem 0;
    line-height: 1.4;
  }

  .tiptap-editor p {
    margin: 0.75em 0;
    line-height: 1.6;
  }

  .tiptap-editor ul {
    list-style: disc;
    padding-left: 1.5rem;
    margin: 0.75em 0;
  }

  .tiptap-editor ol {
    list-style: decimal;
    padding-left: 1.5rem;
    margin: 0.75em 0;
  }

  .tiptap-editor li {
    margin: 0.25em 0;
  }

  .tiptap-editor blockquote {
    border-left: 4px solid var(--color-primary);
    padding-left: 1rem;
    margin: 1rem 0;
    font-style: italic;
    color: var(--color-muted-foreground);
  }

  .tiptap-editor code {
    background: var(--color-muted);
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    font-size: 0.875em;
  }

  .tiptap-editor pre {
    background: var(--color-muted);
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin: 1rem 0;
  }

  .tiptap-editor pre code {
    background: none;
    padding: 0;
    border-radius: 0;
  }

  .tiptap-editor hr {
    border: none;
    border-top: 1px solid var(--color-border);
    margin: 2rem 0;
  }

  .tiptap-editor a {
    color: var(--color-primary);
    text-decoration: underline;
  }

  .tiptap-editor a:hover {
    text-decoration: none;
  }

  .tiptap-editor img {
    max-width: 100%;
    height: auto;
    border-radius: 0.5rem;
    margin: 1rem 0;
  }

  .tiptap-editor .is-editor-empty:first-child::before {
    content: attr(data-placeholder);
    float: left;
    color: var(--color-muted-foreground);
    pointer-events: none;
    height: 0;
  }

  /* Link dialog styles */
  .link-dialog {
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: var(--color-background);
    border: 1px solid var(--color-border);
    border-radius: 0.5rem;
    padding: 1.5rem;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    z-index: 1000;
    min-width: 300px;
  }

  .link-dialog input {
    width: 100%;
    padding: 0.5rem;
    border: 1px solid var(--color-border);
    border-radius: 0.25rem;
    margin-bottom: 1rem;
  }

  .link-dialog .dialog-buttons {
    display: flex;
    gap: 0.5rem;
    justify-content: flex-end;
  }

  .link-dialog button {
    padding: 0.5rem 1rem;
    border-radius: 0.25rem;
    cursor: pointer;
  }

  .link-dialog .btn-primary {
    background: var(--color-primary);
    color: var(--color-primary-foreground);
    border: none;
  }

  .link-dialog .btn-secondary {
    background: transparent;
    border: 1px solid var(--color-border);
    color: var(--color-text);
  }
</style>

<script>
  let editor;
  let linkDialog;

  document.addEventListener('DOMContentLoaded', async () => {
    const editorElement = document.getElementById('tiptap-editor');
    const contentTextarea = document.getElementById('content');

    if (editorElement && contentTextarea) {
      // Dynamically import modules
      const {Editor} = await import('@tiptap/core');
      const StarterKit = await import('@tiptap/starter-kit');
      const Typography = await import('@tiptap/extension-typography');
      const Placeholder = await import('@tiptap/extension-placeholder');
      const Underline = await import('@tiptap/extension-underline');
      const Link = await import('@tiptap/extension-link');
      const Image = await import('@tiptap/extension-image');
      const {marked} = await import('marked');
      const TurndownService = await import('turndown');

      // Configure markdown parser
      marked.setOptions({
        breaks: true,
        gfm: true,
      });

      // Configure HTML to Markdown converter
      const turndownService = new TurndownService.default({
        headingStyle: 'atx',
        codeBlockStyle: 'fenced',
        bulletListMarker: '-',
      });

      // Convert markdown content to HTML for editor initialization
      const markdownContent = contentTextarea.value;
      const htmlContent = await marked(markdownContent);

      // Initialize Tiptap editor with enhanced extensions
      editor = new Editor({
        element: editorElement,
        extensions: [
          StarterKit.default.configure({
            heading: {
              levels: [1, 2, 3, 4, 5, 6],
            },
            bulletList: {
              keepMarks: true,
              keepAttributes: false,
            },
            orderedList: {
              keepMarks: true,
              keepAttributes: false,
            },
            codeBlock: {
              HTMLAttributes: {
                class: 'language-markdown',
              },
            },
          }),
          Typography.default,
          Placeholder.default.configure({
            placeholder: 'Write your post content...',
          }),
          Underline.default,
          Link.default.configure({
            openOnClick: false,
            HTMLAttributes: {
              class: 'cursor-pointer',
            },
          }),
          Image.default.configure({
            HTMLAttributes: {
              class: 'max-w-full h-auto',
            },
          }),
        ],
        content: htmlContent,
        editorProps: {
          attributes: {
            class: 'prose prose-lg prose-invert max-w-none focus:outline-none min-h-[400px] px-4 py-3',
          },
        },
        onUpdate: ({editor}) => {
          // Convert HTML to Markdown using turndown
          const html = editor.getHTML();
          const markdown = turndownService.turndown(html);
          contentTextarea.value = markdown;
          updateToolbarState();
        },
        onSelectionUpdate: () => {
          updateToolbarState();
        },
      });

      // Initialize toolbar handlers
      initializeToolbar();
    }
  });

  function initializeToolbar() {
    // Text formatting
    document.getElementById('bold-btn')?.addEventListener('click', () => {
      editor.chain().focus().toggleBold().run();
    });

    document.getElementById('italic-btn')?.addEventListener('click', () => {
      editor.chain().focus().toggleItalic().run();
    });

    document.getElementById('underline-btn')?.addEventListener('click', () => {
      editor.chain().focus().toggleUnderline().run();
    });

    document.getElementById('strike-btn')?.addEventListener('click', () => {
      editor.chain().focus().toggleStrike().run();
    });

    document.getElementById('code-btn')?.addEventListener('click', () => {
      editor.chain().focus().toggleCode().run();
    });

    // Headings
    document.getElementById('h1-btn')?.addEventListener('click', () => {
      editor.chain().focus().toggleHeading({level: 1}).run();
    });

    document.getElementById('h2-btn')?.addEventListener('click', () => {
      editor.chain().focus().toggleHeading({level: 2}).run();
    });

    document.getElementById('h3-btn')?.addEventListener('click', () => {
      editor.chain().focus().toggleHeading({level: 3}).run();
    });

    document.getElementById('h4-btn')?.addEventListener('click', () => {
      editor.chain().focus().toggleHeading({level: 4}).run();
    });

    // Lists
    document.getElementById('bullet-list-btn')?.addEventListener('click', () => {
      editor.chain().focus().toggleBulletList().run();
    });

    document.getElementById('ordered-list-btn')?.addEventListener('click', () => {
      editor.chain().focus().toggleOrderedList().run();
    });

    // Block elements
    document.getElementById('blockquote-btn')?.addEventListener('click', () => {
      editor.chain().focus().toggleBlockquote().run();
    });

    document.getElementById('code-block-btn')?.addEventListener('click', () => {
      editor.chain().focus().toggleCodeBlock().run();
    });

    document.getElementById('horizontal-rule-btn')?.addEventListener('click', () => {
      editor.chain().focus().setHorizontalRule().run();
    });

    // Links and media
    document.getElementById('link-btn')?.addEventListener('click', () => {
      showLinkDialog();
    });

    document.getElementById('image-btn')?.addEventListener('click', () => {
      showImageDialog();
    });

    // History
    document.getElementById('undo-btn')?.addEventListener('click', () => {
      editor.chain().focus().undo().run();
    });

    document.getElementById('redo-btn')?.addEventListener('click', () => {
      editor.chain().focus().redo().run();
    });

    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      if (e.ctrlKey || e.metaKey) {
        switch (e.key) {
          case 'b':
            e.preventDefault();
            editor.chain().focus().toggleBold().run();
            break;
          case 'i':
            e.preventDefault();
            editor.chain().focus().toggleItalic().run();
            break;
          case 'u':
            e.preventDefault();
            editor.chain().focus().toggleUnderline().run();
            break;
          case 'k':
            e.preventDefault();
            showLinkDialog();
            break;
        }
      }
    });
  }

  function updateToolbarState() {
    if (!editor) return;

    // Update button states based on current selection
    document.getElementById('bold-btn')?.classList.toggle('active', editor.isActive('bold'));
    document.getElementById('italic-btn')?.classList.toggle('active', editor.isActive('italic'));
    document.getElementById('underline-btn')?.classList.toggle('active', editor.isActive('underline'));
    document.getElementById('strike-btn')?.classList.toggle('active', editor.isActive('strike'));
    document.getElementById('code-btn')?.classList.toggle('active', editor.isActive('code'));

    // Headings
    document.getElementById('h1-btn')?.classList.toggle('active', editor.isActive('heading', {level: 1}));
    document.getElementById('h2-btn')?.classList.toggle('active', editor.isActive('heading', {level: 2}));
    document.getElementById('h3-btn')?.classList.toggle('active', editor.isActive('heading', {level: 3}));
    document.getElementById('h4-btn')?.classList.toggle('active', editor.isActive('heading', {level: 4}));

    // Lists
    document.getElementById('bullet-list-btn')?.classList.toggle('active', editor.isActive('bulletList'));
    document.getElementById('ordered-list-btn')?.classList.toggle('active', editor.isActive('orderedList'));

    // Block elements
    document.getElementById('blockquote-btn')?.classList.toggle('active', editor.isActive('blockquote'));
    document.getElementById('code-block-btn')?.classList.toggle('active', editor.isActive('codeBlock'));
    document.getElementById('link-btn')?.classList.toggle('active', editor.isActive('link'));
  }

  function showLinkDialog() {
    const url = prompt('Enter URL:');
    if (url) {
      if (editor.isActive('link')) {
        editor.chain().focus().extendMarkRange('link').setLink({href: url}).run();
      } else {
        editor
          .chain()
          .focus()
          .insertContent(
            `[${editor.state.doc.textBetween(editor.state.selection.from, editor.state.selection.to)}](${url})`
          )
          .run();
      }
    }
  }

  function showImageDialog() {
    const url = prompt('Enter image URL:');
    const alt = prompt('Enter alt text:');
    if (url) {
      editor
        .chain()
        .focus()
        .setImage({src: url, alt: alt || ''})
        .run();
    }
  }
</script>

