---
export interface Props {
  post?: {
    id?: number;
    title: string;
    author: string;
    description?: string;
    pub_date?: string;
    tags?: string[];
    content: string;
    slug?: string;
  };
  mode: 'create' | 'edit';
}

const {post, mode} = Astro.props;

const defaultPost = {
  title: '',
  author: '',
  description: '',
  pub_date: new Date().toISOString().split('T')[0],
  tags: [],
  content: '',
};

const currentPost = post || defaultPost;
---

<form id="post-form" class="space-y-8">
  {post?.id && <input type="hidden" id="post-id" value={post.id} />}

  <!-- Title -->
  <div class="space-y-2">
    <label for="title" class="block text-sm font-medium text-primary">Title*</label>
    <input
      type="text"
      id="title"
      name="title"
      required
      value={currentPost.title}
      class="w-full px-4 py-3 border rounded-sm text-primary placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring"
    />
  </div>

  <!-- Author -->
  <div class="space-y-2">
    <label for="author" class="block text-sm font-medium text-primary">Author*</label>
    <input
      type="text"
      id="author"
      name="author"
      required
      value={currentPost.author}
      class="w-full px-4 py-3 border rounded-sm text-primary placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring"
    />
  </div>

  <!-- Description -->
  <div class="space-y-2">
    <label for="description" class="block text-sm font-medium text-primary">Description</label>
    <textarea
      id="description"
      name="description"
      rows="3"
      class="w-full px-4 py-3 border rounded-sm text-primary placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring resize-none"
      >{currentPost.description || ''}</textarea
    >
  </div>

  <!-- Publication Date -->
  <div class="space-y-2">
    <label for="pub_date" class="block text-sm font-medium text-primary">Publication Date</label>
    <input
      type="date"
      id="pub_date"
      name="pub_date"
      value={currentPost.pub_date}
      class="w-full px-4 py-3 border rounded-sm text-primary focus:outline-none focus:ring-2 focus:ring-ring"
    />
  </div>

  <!-- Tags -->
  <div class="space-y-2">
    <label for="tags" class="block text-sm font-medium text-primary">Tags</label>
    <input
      type="text"
      id="tags"
      name="tags"
      placeholder="design, development, astro"
      value={currentPost.tags ? currentPost.tags.join(', ') : ''}
      class="w-full px-4 py-3 border rounded-sm text-primary placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring"
    />
    <p class="text-xs text-muted-foreground">Separate tags with commas</p>
  </div>

  <!-- Content Editor -->
  <div class="space-y-2">
    <label for="content" class="block text-sm font-medium text-primary">Content*</label>
    <div id="editor-container">
      <div class="tiptap-editor-container border rounded-sm">
        <div class="tiptap-toolbar border rounded-t-sm bg-muted p-2 flex flex-wrap gap-1">
          <!-- Text Formatting -->
          <div class="flex gap-1 border-r pr-2 mr-2">
            <button type="button" id="bold-btn" class="toolbar-btn" title="Bold (Ctrl+B)">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M6 4h8a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"></path>
                <path d="M6 12h9a4 4 0 0 1 4 4 4 4 0 0 1-4 4H6z"></path>
              </svg>
            </button>
            <button type="button" id="italic-btn" class="toolbar-btn" title="Italic (Ctrl+I)">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <line x1="19" y1="4" x2="10" y2="4"></line>
                <line x1="14" y1="20" x2="5" y2="20"></line>
                <line x1="15" y1="4" x2="9" y2="20"></line>
              </svg>
            </button>
            <button type="button" id="underline-btn" class="toolbar-btn" title="Underline (Ctrl+U)">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M6 3v7a6 6 0 0 0 6 6 6 6 0 0 0 6-6V3"></path>
                <line x1="4" y1="21" x2="20" y2="21"></line>
              </svg>
            </button>
            <button type="button" id="strike-btn" class="toolbar-btn" title="Strikethrough">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 4H9a3 3 0 0 0-2.83 4"></path>
                <path d="M14 12c0 1-1 2-2 2s-2-1-2-2 1-2 2-2 2 1 2 2z"></path>
                <path d="M16 20H9a3 3 0 0 1-2.83-4"></path>
                <line x1="4" y1="12" x2="20" y2="12"></line>
              </svg>
            </button>
            <button type="button" id="code-btn" class="toolbar-btn" title="Inline Code">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polyline points="16 18 22 12 16 6"></polyline>
                <polyline points="8 6 2 12 8 18"></polyline>
              </svg>
            </button>
          </div>

          <!-- Headings -->
          <div class="flex gap-1 border-r pr-2 mr-2">
            <button type="button" id="h1-btn" class="toolbar-btn" title="Heading 1">H1</button>
            <button type="button" id="h2-btn" class="toolbar-btn" title="Heading 2">H2</button>
            <button type="button" id="h3-btn" class="toolbar-btn" title="Heading 3">H3</button>
            <button type="button" id="h4-btn" class="toolbar-btn" title="Heading 4">H4</button>
          </div>

          <!-- Lists -->
          <div class="flex gap-1 border-r pr-2 mr-2">
            <button type="button" id="bullet-list-btn" class="toolbar-btn" title="Bullet List">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <line x1="8" y1="6" x2="21" y2="6"></line>
                <line x1="8" y1="12" x2="21" y2="12"></line>
                <line x1="8" y1="18" x2="21" y2="18"></line>
                <line x1="3" y1="6" x2="3.01" y2="6"></line>
                <line x1="3" y1="12" x2="3.01" y2="12"></line>
                <line x1="3" y1="18" x2="3.01" y2="18"></line>
              </svg>
            </button>
            <button type="button" id="ordered-list-btn" class="toolbar-btn" title="Numbered List">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <line x1="10" y1="6" x2="21" y2="6"></line>
                <line x1="10" y1="12" x2="21" y2="12"></line>
                <line x1="10" y1="18" x2="21" y2="18"></line>
                <path d="M4 6h1v4"></path>
                <path d="M4 10h2"></path>
                <path d="M5 18H4c0-1 2-2 2-3s-1-1.5-2-1"></path>
              </svg>
            </button>
          </div>

          <!-- Block Elements -->
          <div class="flex gap-1 border-r pr-2 mr-2">
            <button type="button" id="blockquote-btn" class="toolbar-btn" title="Blockquote">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
              </svg>
            </button>
            <button type="button" id="code-block-btn" class="toolbar-btn" title="Code Block">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M16 18 22 12 16 6"></path>
                <path d="M8 6 2 12 8 18"></path>
              </svg>
            </button>
            <button type="button" id="horizontal-rule-btn" class="toolbar-btn" title="Horizontal Rule">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <line x1="5" y1="12" x2="19" y2="12"></line>
              </svg>
            </button>
          </div>

          <!-- Links and Media -->
          <div class="flex gap-1 border-r pr-2 mr-2">
            <button type="button" id="link-btn" class="toolbar-btn" title="Add Link">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M10 13a5 5 0 0 0 7.54.54l3-3a5 5 0 0 0-7.07-7.07l-1.72 1.71"></path>
                <path d="M14 11a5 5 0 0 0-7.54-.54l-3 3a5 5 0 0 0 7.07 7.07l1.71-1.71"></path>
              </svg>
            </button>
            <button type="button" id="image-btn" class="toolbar-btn" title="Add Image">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
                <circle cx="8.5" cy="8.5" r="1.5"></circle>
                <polyline points="21,15 16,10 5,21"></polyline>
              </svg>
            </button>
          </div>

          <!-- History -->
          <div class="flex gap-1">
            <button type="button" id="undo-btn" class="toolbar-btn" title="Undo (Ctrl+Z)">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M3 7v6h6"></path>
                <path d="M21 17a9 9 0 0 0-9-9 9 9 0 0 0-6 2.3L3 13"></path>
              </svg>
            </button>
            <button type="button" id="redo-btn" class="toolbar-btn" title="Redo (Ctrl+Y)">
              <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M21 7v6h-6"></path>
                <path d="M3 17a9 9 0 0 1 9-9 9 9 0 0 1 6 2.3l3-2.7"></path>
              </svg>
            </button>
          </div>
        </div>
        <div id="tiptap-editor" class="tiptap-editor border-t"></div>
      </div>
    </div>
    <textarea id="content" name="content" class="hidden" required>{currentPost.content}</textarea>
  </div>

  <!-- Actions -->
  <div class="flex gap-4 pt-8">
    <button
      type="submit"
      class="px-6 py-3 bg-primary text-primary-foreground rounded-sm hover:bg-primary/90 transition-colors"
    >
      {mode === 'create' ? 'Create Post' : 'Update Post'}
    </button>
    <a
      href={mode === 'create' ? '/admin' : `/posts/${post?.slug}`}
      class="px-6 py-3 border border-input text-primary rounded-sm hover:bg-accent transition-colors"
    >
      Cancel
    </a>
  </div>
</form>

<!-- Status Message -->
<div id="status-message" class="mt-8"></div>

<style>
  .tiptap-editor {
    font-family: 'Inter', sans-serif;
    min-height: 400px;
    padding: 1rem;
    background: var(--color-background);
    color: var(--color-text);
  }

  .tiptap-editor:focus {
    outline: none;
  }

  .tiptap-editor h1 {
    font-size: 2rem;
    font-weight: bold;
    margin: 1.5rem 0 1rem 0;
    line-height: 1.2;
  }

  .tiptap-editor h2 {
    font-size: 1.5rem;
    font-weight: bold;
    margin: 1.25rem 0 0.75rem 0;
    line-height: 1.3;
  }

  .tiptap-editor h3 {
    font-size: 1.25rem;
    font-weight: bold;
    margin: 1rem 0 0.5rem 0;
    line-height: 1.4;
  }

  .tiptap-editor h4 {
    font-size: 1.125rem;
    font-weight: bold;
    margin: 0.75rem 0 0.5rem 0;
    line-height: 1.4;
  }

  .tiptap-editor p {
    margin: 0.75em 0;
    line-height: 1.6;
  }

  .tiptap-editor ul {
    list-style: disc;
    padding-left: 1.5rem;
    margin: 0.75em 0;
  }

  .tiptap-editor ol {
    list-style: decimal;
    padding-left: 1.5rem;
    margin: 0.75em 0;
  }

  .tiptap-editor li {
    margin: 0.25em 0;
  }

  .tiptap-editor blockquote {
    border-left: 4px solid var(--color-primary);
    padding-left: 1rem;
    margin: 1rem 0;
    font-style: italic;
    color: var(--color-muted-foreground);
  }

  .tiptap-editor code {
    background: var(--color-muted);
    padding: 0.125rem 0.25rem;
    border-radius: 0.25rem;
    font-family: 'Monaco', 'Menlo', 'Ubuntu Mono', monospace;
    font-size: 0.875em;
  }

  .tiptap-editor pre {
    background: var(--color-muted);
    padding: 1rem;
    border-radius: 0.5rem;
    overflow-x: auto;
    margin: 1rem 0;
  }

  .tiptap-editor pre code {
    background: none;
    padding: 0;
    border-radius: 0;
  }

  .tiptap-editor hr {
    border: none;
    border-top: 1px solid var(--color-border);
    margin: 2rem 0;
  }

  .tiptap-editor a {
    color: var(--color-primary);
    text-decoration: underline;
  }

  .tiptap-editor a:hover {
    text-decoration: none;
  }

  .tiptap-editor img {
    max-width: 100%;
    height: auto;
    border-radius: 0.5rem;
    margin: 1rem 0;
  }

  .tiptap-editor .is-editor-empty:first-child::before {
    content: attr(data-placeholder);
    float: left;
    color: var(--color-muted-foreground);
    pointer-events: none;
    height: 0;
  }

  .toolbar-btn {
    padding: 0.5rem;
    border: 1px solid transparent;
    background: transparent;
    border-radius: 0.375rem;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--color-text);
  }

  .toolbar-btn:hover {
    background: var(--color-accent);
    border-color: var(--color-border);
  }

  .toolbar-btn.active {
    background: var(--color-primary);
    color: var(--color-primary-foreground);
    border-color: var(--color-primary);
  }

  .toolbar-btn svg {
    width: 16px;
    height: 16px;
  }
</style>

<script>
  let editor: any;

  document.addEventListener('DOMContentLoaded', async () => {
    const editorElement = document.getElementById('tiptap-editor');
    const contentTextarea = document.getElementById('content');

    if (editorElement && contentTextarea) {
      // Dynamically import modules
      const {Editor} = await import('@tiptap/core');
      const StarterKit = await import('@tiptap/starter-kit');
      const Typography = await import('@tiptap/extension-typography');
      const Placeholder = await import('@tiptap/extension-placeholder');
      const Underline = await import('@tiptap/extension-underline');
      const Link = await import('@tiptap/extension-link');
      const Image = await import('@tiptap/extension-image');
      const {marked} = await import('marked');
      const TurndownService = await import('turndown');

      // Import markdown utilities
      const {preprocessMarkdownContent, configureMarked} = await import('../../utils/markdown');

      // Configure markdown parser
      configureMarked(marked);

      // Configure HTML to Markdown converter
      const turndownService = new TurndownService.default({
        headingStyle: 'atx',
        codeBlockStyle: 'fenced',
        bulletListMarker: '-',
      });

      // Convert markdown content to HTML for editor initialization
      const markdownContent = (contentTextarea as HTMLTextAreaElement).value;
      const processedContent = preprocessMarkdownContent(markdownContent);
      const htmlContent = await marked(processedContent);

      // Initialize Tiptap editor with enhanced extensions
      editor = new Editor({
        element: editorElement,
        extensions: [
          StarterKit.default.configure({
            heading: {
              levels: [1, 2, 3, 4, 5, 6],
            },
            bulletList: {
              keepMarks: true,
              keepAttributes: false,
            },
            orderedList: {
              keepMarks: true,
              keepAttributes: false,
            },
            codeBlock: {
              HTMLAttributes: {
                class: 'language-markdown',
              },
            },
          }),
          Typography.default,
          Placeholder.default.configure({
            placeholder: 'Write your post content...',
          }),
          Underline.default,
          Link.default.configure({
            openOnClick: false,
            HTMLAttributes: {
              class: 'cursor-pointer',
            },
          }),
          Image.default.configure({
            HTMLAttributes: {
              class: 'max-w-full h-auto',
            },
          }),
        ],
        content: htmlContent,
        editorProps: {
          attributes: {
            class: 'prose prose-lg prose-invert max-w-none focus:outline-none min-h-[400px] px-4 py-3',
          },
        },
        onUpdate: ({editor}) => {
          // Convert HTML to Markdown using turndown
          const html = editor.getHTML();
          const markdown = turndownService.turndown(html);
          (contentTextarea as HTMLTextAreaElement).value = markdown;
          updateToolbarState();
        },
        onSelectionUpdate: () => {
          updateToolbarState();
        },
      });

      // Make editor globally available for form submission
      (window as any).editor = editor;

      // Initialize toolbar handlers
      initializeToolbar();
    }
  });

  function initializeToolbar() {
    // Text formatting
    document.getElementById('bold-btn')?.addEventListener('click', () => {
      editor.chain().focus().toggleBold().run();
    });

    document.getElementById('italic-btn')?.addEventListener('click', () => {
      editor.chain().focus().toggleItalic().run();
    });

    document.getElementById('underline-btn')?.addEventListener('click', () => {
      editor.chain().focus().toggleUnderline().run();
    });

    document.getElementById('strike-btn')?.addEventListener('click', () => {
      editor.chain().focus().toggleStrike().run();
    });

    document.getElementById('code-btn')?.addEventListener('click', () => {
      editor.chain().focus().toggleCode().run();
    });

    // Headings
    document.getElementById('h1-btn')?.addEventListener('click', () => {
      editor.chain().focus().toggleHeading({level: 1}).run();
    });

    document.getElementById('h2-btn')?.addEventListener('click', () => {
      editor.chain().focus().toggleHeading({level: 2}).run();
    });

    document.getElementById('h3-btn')?.addEventListener('click', () => {
      editor.chain().focus().toggleHeading({level: 3}).run();
    });

    document.getElementById('h4-btn')?.addEventListener('click', () => {
      editor.chain().focus().toggleHeading({level: 4}).run();
    });

    // Lists
    document.getElementById('bullet-list-btn')?.addEventListener('click', () => {
      editor.chain().focus().toggleBulletList().run();
    });

    document.getElementById('ordered-list-btn')?.addEventListener('click', () => {
      editor.chain().focus().toggleOrderedList().run();
    });

    // Block elements
    document.getElementById('blockquote-btn')?.addEventListener('click', () => {
      editor.chain().focus().toggleBlockquote().run();
    });

    document.getElementById('code-block-btn')?.addEventListener('click', () => {
      editor.chain().focus().toggleCodeBlock().run();
    });

    document.getElementById('horizontal-rule-btn')?.addEventListener('click', () => {
      editor.chain().focus().setHorizontalRule().run();
    });

    // Links and media
    document.getElementById('link-btn')?.addEventListener('click', () => {
      showLinkDialog();
    });

    document.getElementById('image-btn')?.addEventListener('click', () => {
      showImageDialog();
    });

    // History
    document.getElementById('undo-btn')?.addEventListener('click', () => {
      editor.chain().focus().undo().run();
    });

    document.getElementById('redo-btn')?.addEventListener('click', () => {
      editor.chain().focus().redo().run();
    });

    // Keyboard shortcuts
    document.addEventListener('keydown', (e) => {
      if (e.ctrlKey || e.metaKey) {
        switch (e.key) {
          case 'b':
            e.preventDefault();
            editor.chain().focus().toggleBold().run();
            break;
          case 'i':
            e.preventDefault();
            editor.chain().focus().toggleItalic().run();
            break;
          case 'u':
            e.preventDefault();
            editor.chain().focus().toggleUnderline().run();
            break;
          case 'k':
            e.preventDefault();
            showLinkDialog();
            break;
        }
      }
    });
  }

  function updateToolbarState() {
    if (!editor) return;

    // Update button states based on current selection
    document.getElementById('bold-btn')?.classList.toggle('active', editor.isActive('bold'));
    document.getElementById('italic-btn')?.classList.toggle('active', editor.isActive('italic'));
    document.getElementById('underline-btn')?.classList.toggle('active', editor.isActive('underline'));
    document.getElementById('strike-btn')?.classList.toggle('active', editor.isActive('strike'));
    document.getElementById('code-btn')?.classList.toggle('active', editor.isActive('code'));

    // Headings
    document.getElementById('h1-btn')?.classList.toggle('active', editor.isActive('heading', {level: 1}));
    document.getElementById('h2-btn')?.classList.toggle('active', editor.isActive('heading', {level: 2}));
    document.getElementById('h3-btn')?.classList.toggle('active', editor.isActive('heading', {level: 3}));
    document.getElementById('h4-btn')?.classList.toggle('active', editor.isActive('heading', {level: 4}));

    // Lists
    document.getElementById('bullet-list-btn')?.classList.toggle('active', editor.isActive('bulletList'));
    document.getElementById('ordered-list-btn')?.classList.toggle('active', editor.isActive('orderedList'));

    // Block elements
    document.getElementById('blockquote-btn')?.classList.toggle('active', editor.isActive('blockquote'));
    document.getElementById('code-block-btn')?.classList.toggle('active', editor.isActive('codeBlock'));
    document.getElementById('link-btn')?.classList.toggle('active', editor.isActive('link'));
  }

  function showLinkDialog() {
    const url = prompt('Enter URL:');
    if (url) {
      if (editor.isActive('link')) {
        editor.chain().focus().extendMarkRange('link').setLink({href: url}).run();
      } else {
        editor
          .chain()
          .focus()
          .insertContent(
            `[${editor.state.doc.textBetween(editor.state.selection.from, editor.state.selection.to)}](${url})`
          )
          .run();
      }
    }
  }

  function showImageDialog() {
    const url = prompt('Enter image URL:');
    const alt = prompt('Enter alt text:');
    if (url) {
      editor
        .chain()
        .focus()
        .setImage({src: url, alt: alt || ''})
        .run();
    }
  }
</script>
