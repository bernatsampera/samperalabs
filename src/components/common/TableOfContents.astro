---
import type {TOCItem} from '~/utils/tableOfContents';

export interface Props {
  headings: TOCItem[];
  className?: string;
}

const {headings, className = ''} = Astro.props;

// Don't render if no headings
if (!headings || headings.length === 0) {
  return null;
}
---

<div class={`table-of-contents ${className}`}>
  <div class="h-full flex flex-col">
    <h3 class="text-sm font-semibold text-foreground mb-4 uppercase tracking-wider flex-shrink-0">Table of Contents</h3>
    <nav class="flex-1 overflow-y-auto pr-2">
      <ul class="toc-list space-y-1">
        {
          headings.map((heading) => (
            <li class={`toc-item toc-level-${heading.level}`}>
              <a
                href={`#${heading.id}`}
                class={`
                block py-0.5 px-1 text-sm transition-all duration-200 hover:text-foreground hover:bg-accent/50 rounded-md
                ${heading.level === 1 ? 'font-bold text-foreground' : ''}
                ${heading.level === 2 ? 'ml-2 text-muted-foreground font-semibold' : ''}
                ${heading.level === 3 ? 'ml-4 text-muted-foreground font-medium' : ''}
                ${heading.level === 4 ? 'ml-6 text-muted-foreground' : ''}
                ${heading.level === 5 ? 'ml-8 text-muted-foreground' : ''}
                ${heading.level === 6 ? 'ml-10 text-muted-foreground' : ''}
              `}
                data-toc-link={heading.id}
              >
                {heading.text}
              </a>
            </li>
          ))
        }
      </ul>
    </nav>
  </div>
</div>

<style>
  .table-of-contents {
    height: 100%;
    background-color: oklch(lightness chroma hue);
    border: 1px solid hsl(var(--border));
    border-radius: 0.5rem;
    padding: 0.5rem;
  }

  .toc-list {
    border-left: 2px solid hsl(var(--border));
    position: relative;
  }

  .toc-item a {
    position: relative;
    line-height: 1.4;
    word-break: break-word;
  }

  .toc-item a.active {
    color: hsl(var(--foreground));
    background-color: hsl(var(--accent));
    font-weight: 600;
  }

  .toc-item a.active:before {
    content: '';
    position: absolute;
    left: -0.75rem;
    top: 0;
    bottom: 0;
    width: 2px;
    background-color: hsl(var(--foreground));
    border-radius: 1px;
  }

  /* Custom scrollbar styling */
  .table-of-contents nav::-webkit-scrollbar {
    width: 4px;
  }

  .table-of-contents nav::-webkit-scrollbar-track {
    background: transparent;
  }

  .table-of-contents nav::-webkit-scrollbar-thumb {
    background: hsl(var(--border));
    border-radius: 2px;
  }

  .table-of-contents nav::-webkit-scrollbar-thumb:hover {
    background: hsl(var(--muted-foreground));
  }

  /* Firefox scrollbar */
  .table-of-contents nav {
    scrollbar-width: thin;
    scrollbar-color: hsl(var(--border)) transparent;
  }
</style>

<script>
  // Add smooth scrolling and active section highlighting
  document.addEventListener('DOMContentLoaded', () => {
    const tocLinks = document.querySelectorAll('[data-toc-link]');
    const headings = document.querySelectorAll('h1[id], h2[id], h3[id], h4[id], h5[id], h6[id]');

    // Add smooth scrolling to TOC links
    tocLinks.forEach((link) => {
      link.addEventListener('click', (e) => {
        e.preventDefault();
        const targetId = link.getAttribute('href')?.substring(1);
        const targetElement = document.getElementById(targetId || '');

        if (targetElement) {
          targetElement.scrollIntoView({
            behavior: 'smooth',
            block: 'start',
          });

          // Update URL without triggering scroll
          window.history.pushState(null, '', `#${targetId}`);
        }
      });
    });

    // Highlight active section based on scroll position
    const observerOptions = {
      rootMargin: '-20% 0px -70% 0px',
      threshold: 0,
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        const id = entry.target.id;
        const tocLink = document.querySelector(`[data-toc-link="${id}"]`);

        if (entry.isIntersecting) {
          // Remove active from all links
          tocLinks.forEach((link) => link.classList.remove('active'));
          // Add active to current link
          tocLink?.classList.add('active');
        }
      });
    }, observerOptions);

    // Observe all headings
    headings.forEach((heading) => {
      observer.observe(heading);
    });
  });
</script>
