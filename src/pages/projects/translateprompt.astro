---
import Layout from '~/layouts/PageLayout.astro';
import Button from '~/components/ui/Button.astro';
import TranslatePromptImage from '~/assets/images/translateprompt.webp';
import TranslatePromptGraphImage from '~/assets/images/translateprompt/graph.webp';
import TranslatePromptDemo from '~/assets/images/translateprompt/demo.webm';
import {Image} from 'astro:assets';

const metadata = {
  title: 'TranslatePrompt.com Case Study | Bernat Sampera',
};
---

<Layout metadata={metadata}>
  <section class="pt-16 md:pt-24">
    <div class="container mx-auto px-6">
      <a href="/#projects" class="inline-flex items-center text-gray-600 hover:opacity-70 mb-12">
        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
          <path
            fill-rule="evenodd"
            d="M9.707 16.707a1 1 0 01-1.414 0l-6-6a1 1 0 010-1.414l6-6a1 1 0 011.414 1.414L5.414 9H17a1 1 0 110 2H5.414l4.293 4.293a1 1 0 010 1.414z"
            clip-rule="evenodd"></path>
        </svg>
        Back to Projects
      </a>

      <div class="max-w-4xl">
        <h1 class="text-4xl md:text-5xl font-bold mb-6">TranslatePrompt</h1>
        <p class="text-xl text-gray-600 mb-12">
          A learning translation agent that breaks the cycle of repetitive manual corrections by remembering your
          feedback and improving over time.
        </p>
      </div>
    </div>
  </section>

  <section class="py-12">
    <div class="container mx-auto px-6">
      <div class="relative aspect-video rounded-lg mb-16 overflow-hidden shadow-lg">
        <div class="absolute z-10 inset-0 group-hover:opacity-100 transition-opacity duration-300"></div>
        <Image src={TranslatePromptImage} alt="TranslatePrompt.com platform" class="w-full h-full object-cover" />
      </div>

      <div class="grid md:grid-cols-3 gap-12 mb-16">
        <div>
          <h3 class="text-lg font-bold mb-2">Role</h3>
          <p class="text-gray-600">Owner</p>
        </div>

        <div>
          <h3 class="text-lg font-bold mb-2">Timeline</h3>
          <p class="text-gray-600">2025 - Present</p>
        </div>

        <div>
          <h3 class="text-lg font-bold mb-2">Technologies</h3>
          <p class="text-gray-600"><strong>Python:</strong> Langgraph, FastAPI</p>
          <p class="text-gray-600"><strong>Database:</strong> SQLite</p>
          <p class="text-gray-600"><strong>Typescript:</strong> React</p>
        </div>
      </div>

      <div class="max-w-3xl mx-auto">
        <div class="prose prose-lg max-w-none">
          <h2>The Problem</h2>
          <p>
            Traditional translation workflows suffer from a fundamental limitation: they lack memory. Users repeatedly
            encounter the same translation errors—technical terms, company-specific language, or cultural nuances that
            require manual correction. This creates an inefficient cycle where domain expertise is lost after each
            session, forcing users to make the same corrections repeatedly.
          </p>

          <h2>The Solution</h2>
          <p>
            TranslatePrompt addresses this challenge through a conversational AI agent built with LangGraph that
            maintains persistent memory across translation sessions. The system learns from user corrections, building
            personalized glossaries and translation rules that improve accuracy over time. Unlike traditional tools that
            simply process text, this agent evolves with user feedback.
          </p>

          <video width="100%" autoplay muted loop playsinline>
            <source src={TranslatePromptDemo} type="video/webm" />
            Demo video that shows the translate prompt agent in action.
          </video>

          <div class="my-12 text-center">
            <Button
              variant="primary"
              text="Visit TranslatePrompt.com"
              href="https://translateprompt.com"
              target="_blank"
            />
          </div>

          <h2>Architecture Overview</h2>
          <p>
            The system implements a stateful conversation flow using LangGraph, where each node represents a specific
            stage in the translation process. The agent maintains conversational memory through a structured state
            object and uses LangGraph's interrupt mechanism to create human-in-the-loop interactions.
          </p>

          <div class="my-8 bg-gray-50 p-6 rounded-lg">
            <h4 class="font-semibold mb-4">Core Agent State Structure</h4>
            <pre
              class="text-sm bg-white p-4 rounded border overflow-x-auto"><code>class TranslateState(TypedDict):
    messages: Annotated[list[BaseMessage], add_messages]
    original_text: str
    source_language: str
    target_language: str</code></pre>
            <p class="text-sm text-gray-600 mt-3">
              The state object preserves conversation history and context across all interactions, enabling the agent to
              maintain memory of previous corrections and preferences.
            </p>
          </div>

          <h3>Translation Workflow</h3>
          <p>The agent follows a three-stage process that creates an interactive learning loop:</p>

          <ul>
            <li>
              <strong>Initial Translation:</strong> Analyzes the input text, retrieves user-specific glossaries and rules,
              then generates the first translation using contextual prompts.
            </li>
            <li>
              <strong>Human Feedback Loop:</strong> Presents the translation to the user and pauses execution using LangGraph's
              interrupt mechanism, waiting for corrections or approval.
            </li>
            <li>
              <strong>Iterative Refinement:</strong> Processes user feedback to generate improved translations, while simultaneously
              analyzing corrections in the background to build learning artifacts.
            </li>
          </ul>

          <div class="my-8">
            <h4 class="font-semibold mb-4">Agent Flow Diagram</h4>
            <Image
              src={TranslatePromptGraphImage}
              alt="TranslatePrompt.com agent flow diagram"
              class="w-full h-full object-cover"
            />

            <p class="text-sm text-gray-600 mt-3">
              The conversational loop maintains user engagement while background processes handle learning and
              optimization without blocking the user experience.
            </p>
          </div>

          <h2>Key Technical Insights</h2>

          <h3>Performance-First Architecture</h3>
          <p>
            The most critical insight from building this agent was the importance of decoupling user-facing operations
            from background intelligence. The initial design included glossary analysis directly in the refinement loop,
            which created some delays for simple corrections.
          </p>

          <div class="my-6 bg-blue-50 p-4 rounded-lg border-l-4 border-blue-400">
            <p class="text-sm">
              <strong>Architectural Decision:</strong> Split the system into synchronous (immediate user feedback) and asynchronous
              (background learning) processes. This ensures sub-second response times while maintaining the intelligence
              features that make the system valuable.
            </p>
          </div>

          <h3>State Management Patterns</h3>
          <p>
            LangGraph's state management required careful attention to message accumulation. Using the <code
              >add_messages</code
            > reducer pattern ensures conversational context is preserved across interactions, while the <code
              >Command</code
            > pattern provides explicit control flow that's easier to debug than conditional edges.
          </p>

          <h3>Production Considerations</h3>
          <ul>
            <li>
              <strong>Interrupt Mechanism:</strong> LangGraph's built-in interrupts enable true human-in-the-loop workflows
              without complex state management
            </li>
            <li>
              <strong>Background Processing:</strong> Non-blocking analysis jobs maintain responsiveness while building user-specific
              learning artifacts
            </li>
            <li>
              <strong>Conversation Persistence:</strong> Stateful checkpointing allows users to resume translation sessions
              across browser sessions
            </li>
          </ul>

          <div class="my-8 p-6 bg-gray-50 rounded-lg">
            <p class="text-sm text-gray-600 mb-3">
              <strong>Want to dive deeper?</strong> Read the full technical breakdown of how this agent was built:
            </p>
            <a
              href="https://www.samperalabs.com/posts/lessons-learned-building-a-real-world-ai-agent-with-langgraph"
              class="text-blue-600 hover:text-blue-800 font-medium"
            >
              Lessons Learned Building a Real-World AI Agent with LangGraph →
            </a>
          </div>

          <div class="my-12 text-center">
            <Button
              variant="primary"
              text="Visit TranslatePrompt.com"
              href="https://translateprompt.com"
              target="_blank"
            />
          </div>
        </div>
      </div>
    </div>
  </section>

  <section class="py-16 bg-base-50">
    <div class="container mx-auto px-6 text-center">
      <h2 class="text-2xl font-bold mb-6">Interested in similar AI integration for your business?</h2>
      <div class="flex justify-center">
        <Button variant="primary" text="Get in Touch" href="/contact" class="px-8 py-3 font-medium" />
      </div>
    </div>
  </section>
</Layout>
