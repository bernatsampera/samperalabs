---
import Button from '~/components/ui/Button.astro';
import BlogLayout from '../../layouts/BlogLayout.astro';
import TableOfContents from '../../components/common/TableOfContents.astro';
import MobileTableOfContents from '../../components/common/MobileTableOfContents.astro';
import {getDB} from '../../lib/db';
import {Marked} from 'marked';
import {markedHighlight} from 'marked-highlight';
import {preprocessMarkdownContent} from '../../utils/markdown';
import {extractHeadings, addHeadingIds} from '../../utils/tableOfContents';
import hljs from 'highlight.js';

// Generate static paths for all blog posts
export async function getStaticPaths() {
  const db = getDB();
  const allPosts = db.getAllPosts();

  return allPosts.map((post) => ({
    params: {slug: post.slug},
  }));
}

// Get the slug from the URL params
const {slug} = Astro.params;

// Fetch the post from the database
const db = getDB();
const post = db.getPostBySlug(slug ?? '');

// If post not found, return 404
if (!post) {
  return Astro.redirect('/404');
}

// Configure marked with standard options

const marked = new Marked(
  markedHighlight({
    emptyLangClass: 'hljs',
    langPrefix: 'hljs language-python',
    highlight(code, lang) {
      const language = hljs.getLanguage(lang) ? lang : 'python';
      console.log(language);
      return hljs.highlight(code, {language}).value;
    },
  })
);

// configureMarked(marked);

// Convert markdown to HTML with preprocessing
const processedContent = preprocessMarkdownContent(post.content);
let htmlContent = await marked.parse(processedContent);

// Add IDs to headings for anchor navigation
htmlContent = addHeadingIds(htmlContent);

// Extract headings for table of contents
const headings = extractHeadings(htmlContent);

const metadata = {
  title: post.title,
  description: post.description,
};
---

<BlogLayout metadata={metadata} post={post}>
  <!-- Mobile Table of Contents -->
  {headings.length > 1 && <MobileTableOfContents headings={headings} />}

  <!-- Article Content -->
  <div
    class="tiptap-viewer prose prose-lg prose-invert max-w-none prose-headings:text-foreground prose-p:text-muted-foreground prose-strong:text-foreground prose-a:text-foreground hover:prose-a:text-muted-foreground prose-code:text-foreground prose-pre:bg-muted"
    set:html={htmlContent}
  />

  <!-- Desktop Table of Contents - Fixed Sidebar -->
  {
    headings.length > 1 && (
      <aside class="hidden lg:block fixed left-6 top-40 w-64 z-10">
        <TableOfContents headings={headings} />
      </aside>
    )
  }

  <!-- Article Actions -->
  <footer id="admin-actions" class="mt-16 pt-8 border-t hidden">
    <div class="flex gap-4">
      <Button href={`/admin/edit-post/${post.id}`} text="Edit Post" />
      <Button data-post-id={post.id} data-post-title={post.title} text="Delete Post" id="delete-btn" />
    </div>
  </footer>
</BlogLayout>

<script>
  // Check if user is admin and show/hide admin actions
  const isAdmin = localStorage.getItem('isAdmin');
  const adminActions = document.getElementById('admin-actions');

  if (isAdmin === 'true') {
    adminActions?.classList.remove('hidden');
  }

  document.getElementById('delete-btn')?.addEventListener('click', async (e) => {
    const button = e.target as HTMLButtonElement;
    const postId = button.dataset.postId;
    const postTitle = button.dataset.postTitle;

    if (!postId) return;

    if (confirm(`Are you sure you want to delete "${postTitle}"? This action cannot be undone.`)) {
      try {
        const response = await fetch(`/api/posts/${postId}`, {
          method: 'DELETE',
        });

        if (response.ok) {
          window.location.href = '/blog';
        } else {
          const error = await response.json();
          alert(`Error deleting post: ${error.error}`);
        }
      } catch (error) {
        alert('Failed to delete post. Please try again.');
        console.error('Error deleting post:', error);
      }
    }
  });
</script>
